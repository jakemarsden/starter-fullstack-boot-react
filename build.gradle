import com.jakemarsden.githooksgradleplugin.GitHooksPlugin

plugins {
  id 'com.github.node-gradle.node' version '2.2.3' apply false
  id 'com.github.sherter.google-java-format' version '0.8' apply false
  id 'io.spring.dependency-management' version '1.0.9.RELEASE' apply false
  id 'org.springframework.boot' version '2.2.6.RELEASE' apply false
}

apply plugin: GitHooksPlugin

gitHooks {
  hooks.put 'pre-commit', 'check'
}

allprojects {
  group 'com.jakemarsden.starter-fullstack-boot-react'
  version '0.0.1-SNAPSHOT'
}

subprojects {
  repositories {
    jcenter()
  }
}

project('server') {
  apply plugin: 'com.github.sherter.google-java-format'
  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'org.springframework.boot'
  apply plugin: 'application'
  apply plugin: 'java'

  configurations {
    developmentOnly

    compileOnly {
      extendsFrom annotationProcessor
    }

    runtimeClasspath {
      extendsFrom developmentOnly
    }
  }

  dependencyManagement {
    dependencies {
      dependency group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'
    }
  }

  dependencies {
    implementation group: 'org.apache.commons', name: 'commons-lang3'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test') {
      exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    annotationProcessor group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'
    developmentOnly group: 'org.springframework.boot', name: 'spring-boot-devtools'
  }

  springBoot {
    buildInfo {
      properties {
        // omit for build performance and repeatability
        time = null
      }
    }
  }

  bootRun {
    // load static resources directly from source locations during development
    sourceResources sourceSets.main
  }

  application {
    mainClassName 'com.jakemarsden.starterfullstackbootreact.server.Application'
  }

  java {
    sourceCompatibility JavaVersion.VERSION_11
    targetCompatibility JavaVersion.VERSION_11
  }

  test {
    useJUnitPlatform()
  }

  tasks.withType(JavaCompile) {
    options.compilerArgs += [
        '-parameters',
        '-Werror',
        '-Xlint:all',
        '-Xlint:-processing'
    ]
    options.encoding 'UTF-8'
  }

  task processJavadocResources(type: Copy) {
    // Work-around for missing Javadoc 'doc-files' directories
    // see: https://github.com/gradle/gradle/issues/4046
    group tasks.javadoc.group
    from('src/main/java') {
      into "$buildDir/docs/javadoc"
      include '**/doc-files/*'
    }
  }

  javadoc {
    // Replaces `options.docFilesSubDirs true`
    finalizedBy tasks.processJavadocResources
    options.encoding 'UTF-8'
  }

  googleJavaFormat {
    toolVersion '1.7'
  }

  task format {
    // Alias
    group tasks.googleJavaFormat.group
    dependsOn tasks.googleJavaFormat
  }
}

project('webclient') {
  apply plugin: 'com.github.node-gradle.node'
  apply plugin: 'base'

  node {
    download true
    npmVersion '6.14.4'
    version '12.16.2'
  }

  npm_run_start {
    shouldRunAfter tasks.npm_run_build
    shouldRunAfter tasks.npm_run_test
  }

  npm_run_build {
    shouldRunAfter tasks.npm_run_test
    inputs.files fileTree('public')
    inputs.files fileTree('src')
    inputs.files file('package.json')
    inputs.files file('package-lock.json')
    inputs.files file('tsconfig.json')
    outputs.dir 'build'
  }

  npm_run_test {
    inputs.files fileTree('src')
    inputs.files file('package.json')
    inputs.files file('package-lock.json')
    inputs.files file('tsconfig.json')
    // Only re-run when inputs change even though there are no outputs
    outputs.upToDateWhen { true }

    // Tell Jest to exit after running tests rather than entering watch mode
    environment CI: true
  }

  assemble {
    dependsOn tasks.npm_run_build
  }

  task test {
    group tasks.check.group
    dependsOn tasks.npm_run_test
  }

  check {
    dependsOn tasks.test
  }
}
